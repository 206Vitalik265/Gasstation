#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <fstream>
using namespace std;
class Benzun
{
protected:
	int id;
	static int Count;
	int A95;
	int A92;
	int A98;
	int Dp;
	const int lim = 2000;
public:
	Benzun() { A95 = 0; A92 = 0; A98 = 0; Dp = 0; Count++; id = Count; }
	bool setA95(int A95) { if ((A95 + this->A95 <= lim)&&(A95 + this->A95 >= 0))this->A95 = this->A95 +A95; else return 0; return 1; }
	bool setA92(int A92) { if ((A92 + this->A92 <= lim)&&(A95 + this->A95 >= 0))this->A92 = this->A92 +A92; else return 0; return 1; }
	bool setA98(int A98) { if ((A98 + this->A98 <= lim)&&(A98 + this->A98 >= 0))this->A98 = this->A98 +A98; else return 0; return 1; }
	bool setDp(int Dp) { if ((Dp + this->Dp <= lim)&&(Dp + this->Dp >= 0))this->Dp = this->Dp +Dp; else return 0; return 1; }
	int getA95() { return A95; }
	int getA92() { return A92; }
	int getA98() { return A98; }
	int getDp() { return Dp; }
	int getContSt() { return Count; }
static	void setCount(int d) { Count=d; }
	int getID() { return id; }
	virtual void Show(){}
	virtual	bool setGas(int gas) { return 0; };
	virtual int getGas() { return 0; };
	virtual bool setTires(int tires) { return 0; };
	virtual int getTires() { return 0; };
};
int Benzun::Count = 0;
class LehAvGasStatiin :public Benzun
{
	int gas;
	const int lim = 1000;
public:
	LehAvGasStatiin() { gas = 0; }
	bool setGas(int gas)override { if ((gas + this->gas <= lim) && (gas + this->gas >= 0))this->gas = this->gas +gas; else return 0; return 1; }
	int getGas()override { return gas; }
void Show()
{
	cout << "LehAvGasStatiin  N = " << id << "  A98 = " << A98 << "    A95 = " << A95 << "    A92 = " << A92 << "    Gas = " << gas << endl;
}
};
class VanAvGasStatiin :public Benzun
{
	int ree;
	int tires;
	const int lim = 500;
public:
	VanAvGasStatiin() { tires = 0; ree = 0; }
	bool setTires(int tires)override { if ((tires + this->tires <= lim) && (tires + this->tires >= 0))this->tires = this->tires +tires; else return 0; return 1; }
	int getTires()override { return tires; }
	void Show()
	{
		cout << "VanAvGasStatiin  N = " << id << "  A98 = " << A98 << "    A95 = " << A95 << "    A92 = " << A92 << "    Tires = " << tires << endl;
	}
};
class Menu
{
	vector <Benzun*> d;
	string strLEH = "class LehAvGasStatiin";
	string pathLeh = "LEHav.txt";
	string pathVan = "VanAv.txt";
public:
	int DodOrVid(Benzun *ben, int triger);
	void Create();
	Benzun* Search(int choice);
	void MainMenu();
	void Save();
	void Open();
};
int Menu::DodOrVid(Benzun *ben, int triger)
{
	bool cicletriger = true;
	bool stateofInfo = true;
	string stateOfinfo;
	string choiceAdding;
	string kindofStation;
	int choise = 0;
	int information = 0;
	if (triger == 1)
		stateOfinfo = "Adding information";
	else
		stateOfinfo = "Minus information";
	if (typeid(*ben).name() == strLEH)
	{
		choiceAdding = "Gas   5";
		kindofStation = "LehAvGasStatiin N = ";
	}
	else
	{
		choiceAdding = "Tires   5";
		kindofStation = "VanAvGasStatiin N = ";
	}
	while (cicletriger)
	{
		system("cls");
		cout << kindofStation << ben->getID() << endl << endl;
		cout << stateOfinfo << endl << endl;
		cout << "Choose info wich you want work with :" << endl;
		cout << "A95   1" << endl;
		cout << "A92   2" << endl;
		cout << "A98   3" << endl;
		cout << "Dp    4" << endl;
		cout << choiceAdding << endl;
		cout << "Go to main menu press  0" << endl;
		cin >> choise;
		switch (choise)
		{
		case 0:
			return 1;
			break;
		case 1:
			cout << "Enter Information :" << endl;
			cin >> information;
			information = information*triger;
			stateofInfo = ben->setA95(information);
			break;
		case 2:
			cout << "Enter Information :" << endl;
			cin >> information;
			information = information*triger;
			stateofInfo = ben->setA92(information);
			break;
		case 3:
			cout << "Enter Information :" << endl;
			cin >> information;
			information = information*triger;
			stateofInfo = ben->setA98(information);
			break;
		case 4:
			cout << "Enter Information :" << endl;
			cin >> information;
			information = information*triger;
			stateofInfo = ben->setDp(information);
			break;
		case 5:
			cout << "Enter Information :" << endl;
			cin >> information;
			information = information*triger;
			if (typeid(*ben).name() == strLEH)
				stateofInfo = ben->setGas(information);
			else
				stateofInfo = ben->setTires(information);
			break;
		}
		if (stateofInfo == false)
		{
			system("cls");
			cout << "Something wrong with your information please chek it !!!!!!!" << endl;
			cout << "Return press 0" << endl;
			cin >> choise;
		}
	}
	return 1;
}
void Menu::Create()
{
	bool triger = true;
	int choice = 0;
	while (triger)
	{
		system("cls");
		cout << "Enter petrolstation wich you want to create" << endl;
		cout << "LehAvGasStatiin  1" << endl;
		cout << "VanAvGasStatiin  2" << endl;
		cout << "Exit             0" << endl;
		cin >> choice;
		switch (choice)
		{
		case 1:
			triger = false;
			d.push_back(new LehAvGasStatiin());
			cout << "LehAvGasStatiin  is create with ID = " << d.size() << endl;
			cout << "Coninue enter 0" << endl;
			cin >> choice;
			break;
		case 2:
			triger = false;
			d.push_back(new VanAvGasStatiin());
			cout << "VanAvGasStatiin  is create with ID = " << d.size() << endl;
			cout << "Coninue enter 0" << endl;
			cin >> choice;
			break;
		case 0:
			triger = false;
			break;
		default:
			system("cls");
			cout << "Something wrong with your information please chek it !!!!!!!" << endl;
			break;
		}
	}
}
Benzun* Menu::Search(int choice)
{
	for (int i = 0; i<d.size(); i++)
	{
		if (d[i]->getID() == choice)
			return d[i];
	}
	return 0;
}
void Menu::MainMenu()
{
	bool triger = true;
	int choice;
	int id;
	int desi;
	while (triger)
	{
		system("cls");
		cout << "       Petrol Database    " << endl;
		cout << "Create PetrolStation                         1" << endl;
		cout << "Add information to Petrolstation             2" << endl;
		cout << "Minus information from Petrolstation         3" << endl;
		cout << "Show information about Petrolstation by id   4" << endl;
		cout << "Show information about all Petrolstations    5" << endl;
		cout << "Exit                                         0" << endl;
		cout << "Please enter your choice" << endl;
		cin >> choice;
		switch (choice)
		{
		case 1:
			Create();
			break;
		case 2:
			system("cls");
			cout << "Enter id of sation wich you want to work with :" << endl;
			cin >> id;
			if (id > 0 && id <= d.size())
			{
				Benzun*idd = Search(id);
				DodOrVid(idd, 1);
			}
			else
			{
				system("cls");
				cout << "In Database isn't this id chek it " << endl;
			}
			break;
		case 3:
			system("cls");
			cout << "Enter id of sation wich you want to work with :" << endl;
			cin >> id;
			if (id > 0 && id <= d.size())
			{
				Benzun*idd = Search(id);
				DodOrVid(idd, -1);
			}
			else
			{
				system("cls");
				cout << "In Database isn't this id chek it " << endl;
			}
			break;
		case 4:
			system("cls");
			cout << "Enter id of sation wich you want to see :" << endl;
			cin >> id;
			if (id > 0 && id <= d.size())
			{
				Benzun*idd = Search(id);
				idd->Show();
				cout << "Coninue enter 0" << endl;
				cin >> desi;
			}
			else
			{
				system("cls");
				cout << "In Database isn't this id chek it " << endl;
			}
			break;
		case 5:
			system("cls");
			for (int i = 0; i < d.size(); i++)
				d[i]->Show();
			cout << "Coninue enter 0" << endl;
			cin >> desi;
			break;
		case 0:
			triger = false;
			break;
		default:
			break;
		}
	}
}
void Menu::Save()
{
	ofstream ofs, ofs1;
	ofs.open(pathLeh);
	ofs1.open(pathVan);
	if (!ofs.is_open())
	{
		cout << "Error problem with file" << endl;
	}
	else
	{
		for (int i = 0; i < d.size(); i++)
		{
			if (typeid(*d[i]).name() == strLEH)
				ofs.write((char*)d[i], sizeof(LehAvGasStatiin));
			else
				ofs1.write((char*)d[i], sizeof(VanAvGasStatiin));
		}
	}
	ofs.close();
	ofs1.close();
}
void Menu::Open()
{
	bool triger = true;
	ifstream ifs, ifs1;
	ifs.open(pathLeh);
	ifs1.open(pathVan);
	if (!ifs.is_open())
	{
		cout << "Error problem with file" << endl;
	}
	else
	{
		Benzun *leh;
		leh = new LehAvGasStatiin();
		while (triger)
		{
			if (ifs.read((char*)leh, sizeof(LehAvGasStatiin)))
			{
				d.push_back(leh);
				leh = new LehAvGasStatiin();
			}
			else
			{
				triger = false;
				delete leh;
			}
		}
	}
	ifs.close();
	Benzun *leh;
	leh = new VanAvGasStatiin();
	triger = true;
	if (!ifs1.is_open())
	{
		cout << "Error problem with file" << endl;
	}
	else
	{
		while (triger)
		{
			if (ifs1.read((char*)leh, sizeof(VanAvGasStatiin)))
			{
				d.push_back(leh);
				leh = new VanAvGasStatiin();
			}
			else
			{
				triger = false;
				delete leh;
			}
		}
	}
	ifs1.close();
	Benzun::setCount(d.size());
}
int main()
{
	Menu m;
	m.Open();
	m.MainMenu();
	m.Save();
	return 0;
}
